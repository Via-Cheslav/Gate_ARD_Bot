import asyncio
import os
import uuid
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from dotenv import load_dotenv

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot=bot)

tasks = {}  # –°–ª–æ–≤–∞—Ä—å —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞—á, —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∑–∞—è–≤–∫–∏

# === –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–ª–∏–µ–Ω—Ç–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ ===
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ü—Ä–æ—à—É –æ—Ç–∫—Ä—ã—Ç—å –≤–æ—Ä–æ—Ç–∞ –í–™–ï–ó–î üöó")],
        [KeyboardButton(text="üöó –ü—Ä–æ—à—É –æ—Ç–∫—Ä—ã—Ç—å –≤–æ—Ä–æ—Ç–∞ –í–´–ï–ó–î")],
    ],
    resize_keyboard=True
)

# === /start ===
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ü–∏—Ñ—Ä—É):\n"
        "1 ‚Äî –í—ä–µ–∑–¥\n"
        "2 ‚Äî –í—ã–µ–∑–¥",
        reply_markup=main_kb
    )

# === /help ===
@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    help_text = (
        "üîπ –ë–æ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ—Ä–æ—Ç–∞–º–∏\n"
        "–ö–Ω–æ–ø–∫–∏ –∏–ª–∏ —Ü–∏—Ñ—Ä—ã –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π:\n"
        "1 ‚Äî –ü—Ä–æ—à—É –æ—Ç–∫—Ä—ã—Ç—å –≤–æ—Ä–æ—Ç–∞ –í–™–ï–ó–î\n"
        "2 ‚Äî –ü—Ä–æ—à—É –æ—Ç–∫—Ä—ã—Ç—å –≤–æ—Ä–æ—Ç–∞ –í–´–ï–ó–î\n"
        "3 ‚Äî –í—ã–ø–æ–ª–Ω–µ–Ω–æ (–¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞)\n"
        "4 ‚Äî –°–ø–∞—Å–∏–±–æ (–¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞)\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/id ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à Telegram ID\n"
        "/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é"
    )
    await message.answer(help_text)

# === /id ===
@dp.message(Command("id"))
async def get_id(message: types.Message):
    await message.answer(f"–í–∞—à Telegram ID: {message.from_user.id}")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∏ —Ü–∏—Ñ—Ä ===
@dp.message()
async def handle_request(message: types.Message):
    text = message.text.strip()
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if text in ["–ü—Ä–æ—à—É –æ—Ç–∫—Ä—ã—Ç—å –≤–æ—Ä–æ—Ç–∞ –í–™–ï–ó–î üöó", "1"]:
        direction = "–≤—ä–µ–∑–¥"
    elif text in ["üöó –ü—Ä–æ—à—É –æ—Ç–∫—Ä—ã—Ç—å –≤–æ—Ä–æ—Ç–∞ –í–´–ï–ó–î", "2"]:
        direction = "–≤—ã–µ–∑–¥"
    else:
        return  # –î—Ä—É–≥–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º

    user_id = message.from_user.id
    user_name = message.from_user.username or message.from_user.first_name
    task_id = str(uuid.uuid4())

    # –ö–ª–∏–µ–Ω—Ç—É: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—Ä–æ—Å–µ
    user_msg = await message.answer(
        f"[–ö–õ–ò–ï–ù–¢] –ó–∞—è–≤–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º. –ñ–¥–∏—Ç–µ",
        reply_markup=main_kb
    )

    tasks[task_id] = {
        "user_id": user_id,
        "user_name": user_name,
        "direction": direction,
        "user_msg_id": user_msg.message_id,
        "operator_done_msg_id": None,
        "operator_name": None
    }

    # –û–ø–µ—Ä–∞—Ç–æ—Ä—É (—Ç–æ—Ç –∂–µ –∞–∫–∫–∞—É–Ω—Ç)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"done:{task_id}"),
            InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"ignore:{task_id}")
        ]
    ])
    await bot.send_message(
        user_id,
        f"[–û–ü–ï–†–ê–¢–û–†] @{user_name} –ø—Ä–æ—Å–∏—Ç –æ—Ç–∫—Ä—ã—Ç—å –≤–æ—Ä–æ—Ç–∞ {direction}\n(–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 3 ‚Äî –í—ã–ø–æ–ª–Ω–µ–Ω–æ)",
        reply_markup=kb
    )

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∏ –∫–Ω–æ–ø–æ–∫ ===
@dp.callback_query(F.data.startswith(("done:", "ignore:")))
async def handle_operator_action(callback: types.CallbackQuery):
    action, task_id = callback.data.split(":")
    task = tasks.get(task_id)
    if not task:
        await callback.answer("–ó–∞—è–≤–∫–∞ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    user_id = task["user_id"]
    user_name = task["user_name"]
    direction = task["direction"]
    operator_name = callback.from_user.username or callback.from_user.first_name
    task["operator_name"] = operator_name

    if action == "ignore":
        await callback.message.edit_text(f"[–û–ü–ï–†–ê–¢–û–†] –ó–∞—è–≤–∫–∞ –Ω–∞ {direction} –±—ã–ª–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞")
        tasks.pop(task_id)
        return

    # –°–æ–∑–¥–∞—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
    done_msg = await bot.send_message(
        user_id,
        f"[–û–ü–ï–†–ê–¢–û–†] –ó–∞—è–≤–∫–∞ –¥–ª—è @{user_name} –Ω–∞ {direction} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ\n(–û—Ç–ø—Ä–∞–≤—å—Ç–µ 4 ‚Äî –°–ø–∞—Å–∏–±–æ)"
    )
    task["operator_done_msg_id"] = done_msg.message_id

    # –ö–ª–∏–µ–Ω—Ç—É: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –°–ø–∞—Å–∏–±–æ
    thank_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üëç –°–ø–∞—Å–∏–±–æ", callback_data=f"thank:{task_id}")]
    ])
    await bot.send_message(
        user_id,
        f"[–ö–õ–ò–ï–ù–¢] –í–æ—Ä–æ—Ç–∞ {direction} –æ—Ç–∫—Ä—ã—Ç—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º @{operator_name}",
        reply_markup=thank_kb
    )

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –°–ø–∞—Å–∏–±–æ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –∏–ª–∏ —Ü–∏—Ñ—Ä—É 4 ===
@dp.message(F.text.in_(["4"]))
async def handle_thank_number(message: types.Message):
    # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–¥–∞—á—É –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    task_id = None
    for tid, t in tasks.items():
        if t["user_id"] == message.from_user.id:
            task_id = tid
    if not task_id:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞—è–≤–∫–∏ –¥–ª—è –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏.")
        return

    await handle_thank_by_id(message, task_id)

@dp.callback_query(F.data.startswith("thank:"))
async def handle_thank(callback: types.CallbackQuery):
    task_id = callback.data.split(":")[1]
    await handle_thank_by_id(callback, task_id)

async def handle_thank_by_id(obj, task_id):
    task = tasks.pop(task_id, None)
    if not task:
        if isinstance(obj, types.CallbackQuery):
            await obj.answer("–ó–∞—è–≤–∫–∞ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞.")
        else:
            await obj.answer("–ó–∞—è–≤–∫–∞ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞.")
        return

    user_id = task["user_id"]
    user_name = task["user_name"]
    direction = task["direction"]
    operator_name = task.get("operator_name", "–æ–ø–µ—Ä–∞—Ç–æ—Ä")
    operator_done_msg_id = task.get("operator_done_msg_id")

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –°–ø–∞—Å–∏–±–æ
    if isinstance(obj, types.CallbackQuery):
        await obj.message.delete()
        await obj.answer("–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")

    # –ö–ª–∏–µ–Ω—Ç—É: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ + –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await bot.send_message(
        user_id,
        f"[–ö–õ–ò–ï–ù–¢] –ó–∞—è–≤–∫–∞ –Ω–∞ {direction} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ @{operator_name}",
        reply_markup=main_kb
    )

    # –û–ø–µ—Ä–∞—Ç–æ—Ä—É: —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∏ –±–ª–∞–≥–æ–¥–∞—Ä–∏–º
    if operator_done_msg_id:
        try:
            await bot.delete_message(chat_id=user_id, message_id=operator_done_msg_id)
        except:
            pass
    await bot.send_message(
        user_id,
        f"[–û–ü–ï–†–ê–¢–û–†] üëè –°–ø–∞—Å–∏–±–æ –∑–∞ {direction} –æ—Ç @{user_name}"
    )

# === –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª ===
async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–µ–º —Å–æ–±—ã—Ç–∏—è...")
    await dp.start_polling(skip_updates=True)

if __name__ == "__main__":
    asyncio.run(main())
