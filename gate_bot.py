# UPDATE_LOGGING_v2
import asyncio
import os
import uuid
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from dotenv import load_dotenv

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPERATORS = os.getenv("OPERATORS", "").split(",") if os.getenv("OPERATORS") else []
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot=bot)

tasks = {}

# === –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
def log(msg):
    print(f"[LOG] {msg}")

# === –û–±—â–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (–¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞) —Å –º–∞—à–∏–Ω–∫–æ–π üöó ===
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ü—Ä–æ—à—É –æ—Ç–∫—Ä—ã—Ç—å –≤—ä–µ–∑–¥ üöó")],   # –º–∞—à–∏–Ω–∫–∞ —Å–ª–µ–≤–∞
        [KeyboardButton(text="üöó –ü—Ä–æ—à—É –æ—Ç–∫—Ä—ã—Ç—å –≤—ã–µ–∑–¥")],   # –º–∞—à–∏–Ω–∫–∞ —Å–ø—Ä–∞–≤–∞
    ],
    resize_keyboard=True
)

# === –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç ===
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    log(f"–°—Ç–∞—Ä—Ç –æ—Ç {message.from_user.username or message.from_user.first_name}")
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_kb
    )

# === –ö–æ–º–∞–Ω–¥–∞ /id –¥–ª—è —Ç–µ—Å—Ç–∞ ===
@dp.message(Command("id"))
async def get_id(message: types.Message):
    await message.answer(f"–í–∞—à Telegram ID: {message.from_user.id}")
    log(f"–ó–∞–ø—Ä–æ—Å ID –æ—Ç {message.from_user.username or message.from_user.first_name}")

# === –ö–æ–º–∞–Ω–¥–∞ /help ===
@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    text = ("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞:\n"
            "1. –í–æ—Ä–æ—Ç–∞: –í—ã–±–µ—Ä–∏—Ç–µ '–ü—Ä–æ—à—É –æ—Ç–∫—Ä—ã—Ç—å –≤—ä–µ–∑–¥/–≤—ã–µ–∑–¥'\n"
            "2. –û–ø–µ—Ä–∞—Ç–æ—Ä: –ù–∞–∂–º–∏—Ç–µ '–°–¥–µ–ª–∞–Ω–æ' –∏–ª–∏ '–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å'\n"
            "3. –ö–ª–∏–µ–Ω—Ç: –ù–∞–∂–º–∏—Ç–µ '–°–ø–∞—Å–∏–±–æ' –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è")
    await message.answer(text)
    log(f"–ó–∞–ø—Ä–æ—Å –ø–æ–º–æ—â–∏ –æ—Ç {message.from_user.username or message.from_user.first_name}")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ –≤–æ—Ä–æ—Ç ===
@dp.message(F.text.in_(["–ü—Ä–æ—à—É –æ—Ç–∫—Ä—ã—Ç—å –≤—ä–µ–∑–¥ üöó", "üöó –ü—Ä–æ—à—É –æ—Ç–∫—Ä—ã—Ç—å –≤—ã–µ–∑–¥"]))
async def handle_request(message: types.Message):
    direction = "–≤—ä–µ–∑–¥" if "–≤—ä–µ–∑–¥" in message.text else "–≤—ã–µ–∑–¥"
    user_id = message.from_user.id
    user_name = message.from_user.username or message.from_user.first_name
    task_id = str(uuid.uuid4())

    # –ö–ª–∏–µ–Ω—Ç—É: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—Ä–æ—Å–µ
    user_msg = await message.answer(f"- –ó–∞—è–≤–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º. –ñ–¥–∏—Ç–µ", reply_markup=main_kb)
    log(f"–ó–∞—è–≤–∫–∞ {task_id} —Å–æ–∑–¥–∞–Ω–∞ –æ—Ç {user_name} –Ω–∞ {direction}")

    tasks[task_id] = {
        "user_id": user_id,
        "user_name": user_name,
        "direction": direction,
        "user_msg_id": user_msg.message_id,
        "operator_msg_ids": []
    }

    # –û–ø–µ—Ä–∞—Ç–æ—Ä–∞–º: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ + —Ç–µ –∂–µ –∫–Ω–æ–ø–∫–∏ —á—Ç–æ —É –∫–ª–∏–µ–Ω—Ç–∞
    for op_id in OPERATORS:
        try:
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="–°–¥–µ–ª–∞–Ω–æ", callback_data=f"done:{task_id}"),
                    InlineKeyboardButton(text="–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"ignore:{task_id}")
                ]
            ])
            op_msg = await bot.send_message(
                int(op_id),
                f"> @{user_name} –ø—Ä–æ—Å–∏—Ç –æ—Ç–∫—Ä—ã—Ç—å {direction}",
                reply_markup=kb
            )
            tasks[task_id]["operator_msg_ids"].append(op_msg.message_id)
            log(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É {op_id}, task_id={task_id}")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä—É —Ç–µ –∂–µ –∫–Ω–æ–ø–∫–∏, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç—É
            await bot.send_message(
                int(op_id),
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=main_kb
            )
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É {op_id}: {e}")

# === –î–µ–π—Å—Ç–≤–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ ===
@dp.callback_query(F.data.startswith(("done:", "ignore:")))
async def handle_operator_action(callback: types.CallbackQuery):
    action, task_id = callback.data.split(":")
    task = tasks.get(task_id)
    if not task:
        await callback.answer("–ó–∞—è–≤–∫–∞ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        log(f"–û–ø–µ—Ä–∞—Ç–æ—Ä –Ω–∞–∂–∞–ª {action}, –Ω–æ task {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    user_id = task["user_id"]
    user_name = task["user_name"]
    direction = task["direction"]
    operator_name = callback.from_user.username or callback.from_user.first_name

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_msg_id = task.get("user_msg_id")
    if user_msg_id:
        try:
            await bot.delete_message(chat_id=user_id, message_id=user_msg_id)
            log(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name} task {task_id}")
        except:
            pass

    if action == "ignore":
        # –ò–∑–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫–∏
        await callback.message.edit_text(f"> –ó–∞—è–≤–∫–∞ –Ω–∞ {direction} –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∞")
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_kb)
        log(f"–û–ø–µ—Ä–∞—Ç–æ—Ä {operator_name} –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–ª task {task_id}")
        return

    # –î–µ–π—Å—Ç–≤–∏–µ ‚Äú–°–¥–µ–ª–∞–Ω–æ‚Äù
    await callback.message.edit_text(f"> –ó–∞—è–≤–∫–∞ –¥–ª—è @{user_name} –Ω–∞ {direction} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
    log(f"–û–ø–µ—Ä–∞—Ç–æ—Ä {operator_name} –≤—ã–ø–æ–ª–Ω–∏–ª task {task_id}")

    # –ö–ª–∏–µ–Ω—Ç—É: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π ‚Äú–°–ø–∞—Å–∏–±–æ‚Äù
    thank_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üëç –°–ø–∞—Å–∏–±–æ", callback_data=f"thank:{task_id}")]
    ])
    await bot.send_message(
        user_id,
        f"- –í–æ—Ä–æ—Ç–∞ {direction} –æ—Ç–∫—Ä—ã—Ç—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º @{operator_name}",
        reply_markup=thank_kb
    )
    log(f"–°–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É {user_name} —Å –∫–Ω–æ–ø–∫–æ–π –°–ø–∞—Å–∏–±–æ, task {task_id}")

# === –ö–ª–∏–µ–Ω—Ç –Ω–∞–∂–∞–ª –°–ø–∞—Å–∏–±–æ ===
@dp.callback_query(F.data.startswith("thank:"))
async def handle_thank(callback: types.CallbackQuery):
    task_id = callback.data.split(":")[1]
    task = tasks.pop(task_id, None)
    if not task:
        await callback.answer("–ó–∞—è–≤–∫–∞ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞.")
        log(f"–ù–∞–∂–∞—Ç–∞ –°–ø–∞—Å–∏–±–æ –¥–ª—è —É–∂–µ –∑–∞–∫—Ä—ã—Ç–æ–π –∑–∞—è–≤–∫–∏ task {task_id}")
        return

    user_id = task["user_id"]
    user_name = task["user_name"]
    direction = task["direction"]
    operator_name = callback.from_user.username or "–æ–ø–µ—Ä–∞—Ç–æ—Ä"

    # –£–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
    await callback.message.delete()
    await callback.answer("–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
    log(f"–ö–ª–∏–µ–Ω—Ç {user_name} –Ω–∞–∂–∞–ª –°–ø–∞—Å–∏–±–æ, task {task_id}")

    # –ö–ª–∏–µ–Ω—Ç—É: –∫–æ—Ä–æ—Ç–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ + –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await bot.send_message(
        user_id,
        f"- –ó–∞—è–≤–∫–∞ –Ω–∞ {direction} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ @{operator_name}",
        reply_markup=main_kb
    )

    # –û–ø–µ—Ä–∞—Ç–æ—Ä–∞–º: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ —Å —ç–º–æ–¥–∑–∏ üëè
    for op_id in OPERATORS:
        try:
            await bot.send_message(
                int(op_id),
                f"> üëè –°–ø–∞—Å–∏–±–æ –∑–∞ {direction} –æ—Ç @{user_name}"
            )
            log(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–ø–∞—Å–∏–±–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É {op_id} –∑–∞ task {task_id}")
        except:
            log(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∞—Å–∏–±–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É {op_id} –∑–∞ task {task_id}")

# === –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
async def main():
    log("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–µ–º —Å–æ–±—ã—Ç–∏—è...")
    await dp.start_polling(skip_updates=True)

if __name__ == "__main__":
    asyncio.run(main())
