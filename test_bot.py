import asyncio
import os
import uuid
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from dotenv import load_dotenv

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPERATORS = os.getenv("OPERATORS", "").split(",") if os.getenv("OPERATORS") else []
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))

# === –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ===
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()  # dispatcher –ø—É—Å—Ç–æ–π, –ø–µ—Ä–µ–¥–∞–¥–∏–º bot –≤ start_polling

tasks = {}

# === –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (–∫–Ω–æ–ø–∫–∏ —Å –º–∞—à–∏–Ω–∫–æ–π üöó) ===
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ü—Ä–æ—à—É –æ—Ç–∫—Ä—ã—Ç—å –≤—ä–µ–∑–¥ üöó")],
        [KeyboardButton(text="üöó –ü—Ä–æ—à—É –æ—Ç–∫—Ä—ã—Ç—å –≤—ã–µ–∑–¥")],
    ],
    resize_keyboard=True
)

# === –ö–æ–º–∞–Ω–¥—ã ===
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_kb
    )

@dp.message(Command("id"))
async def cmd_id(message: types.Message):
    await message.answer(f"–í–∞—à Telegram ID: {message.from_user.id}")

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    text = (
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É\n"
        "/id ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–π Telegram ID\n"
        "–ö–Ω–æ–ø–∫–∏:\n"
        "üöó –ü—Ä–æ—à—É –æ—Ç–∫—Ä—ã—Ç—å –≤—ä–µ–∑–¥/–≤—ã–µ–∑–¥ ‚Äî –∑–∞–ø—Ä–æ—Å–∏—Ç—å –æ—Ç–∫—Ä—ã—Ç–∏–µ –≤–æ—Ä–æ—Ç\n"
        "–°–¥–µ–ª–∞–Ω–æ ‚Äî –æ–ø–µ—Ä–∞—Ç–æ—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ\n"
        "üëç –°–ø–∞—Å–∏–±–æ ‚Äî –∫–ª–∏–µ–Ω—Ç –±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è\n"
        "–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å ‚Äî –æ–ø–µ—Ä–∞—Ç–æ—Ä –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å"
    )
    await message.answer(text)

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞ ===
@dp.message(F.text.in_(["–ü—Ä–æ—à—É –æ—Ç–∫—Ä—ã—Ç—å –≤—ä–µ–∑–¥ üöó", "üöó –ü—Ä–æ—à—É –æ—Ç–∫—Ä—ã—Ç—å –≤—ã–µ–∑–¥"]))
async def handle_request(message: types.Message):
    direction = "–≤—ä–µ–∑–¥" if "–≤—ä–µ–∑–¥" in message.text else "–≤—ã–µ–∑–¥"
    user_id = message.from_user.id
    user_name = message.from_user.username or message.from_user.first_name
    task_id = str(uuid.uuid4())

    # –ö–ª–∏–µ–Ω—Ç—É: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    user_msg = await message.answer(
        "–ó–∞—è–≤–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º. –ñ–¥–∏—Ç–µ",
        reply_markup=main_kb
    )

    tasks[task_id] = {
        "user_id": user_id,
        "user_name": user_name,
        "direction": direction,
        "user_msg_id": user_msg.message_id
    }

    # –û–ø–µ—Ä–∞—Ç–æ—Ä–∞–º: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    for op_id in OPERATORS:
        try:
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="–°–¥–µ–ª–∞–Ω–æ", callback_data=f"done:{task_id}"),
                    InlineKeyboardButton(text="–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"ignore:{task_id}")
                ]
            ])
            await bot.send_message(
                int(op_id),
                f"-> @{user_name} –ø—Ä–æ—Å–∏—Ç –æ—Ç–∫—Ä—ã—Ç—å {direction}",
                reply_markup=kb
            )
        except Exception as e:
            print(f"[LOG] –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É {op_id}: {e}")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ ===
@dp.callback_query(F.data.startswith(("done:", "ignore:")))
async def handle_operator_action(callback: types.CallbackQuery):
    action, task_id = callback.data.split(":")
    task = tasks.get(task_id)
    if not task:
        await callback.answer("–ó–∞—è–≤–∫–∞ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    user_id = task["user_id"]
    user_name = task["user_name"]
    direction = task["direction"]
    operator_name = callback.from_user.username or callback.from_user.first_name

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞
    user_msg_id = task.get("user_msg_id")
    if user_msg_id:
        try:
            await bot.delete_message(chat_id=user_id, message_id=user_msg_id)
        except:
            pass

    if action == "ignore":
        await callback.message.edit_text(f"-> –ó–∞—è–≤–∫–∞ –Ω–∞ {direction} –±—ã–ª–∞ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∞")
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_kb)
        tasks.pop(task_id)
        return

    # –°–¥–µ–ª–∞–Ω–æ
    await callback.message.edit_text(f"-> –ó–∞—è–≤–∫–∞ –¥–ª—è @{user_name} –Ω–∞ {direction} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
    task["operator_name"] = operator_name  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏

    # –ö–ª–∏–µ–Ω—Ç—É: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –°–ø–∞—Å–∏–±–æ
    thank_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üëç –°–ø–∞—Å–∏–±–æ", callback_data=f"thank:{task_id}")]
    ])
    await bot.send_message(
        user_id,
        f"–í–æ—Ä–æ—Ç–∞ {direction} –æ—Ç–∫—Ä—ã—Ç—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º @{operator_name}",
        reply_markup=thank_kb
    )

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞ ===
@dp.callback_query(F.data.startswith("thank:"))
async def handle_thank(callback: types.CallbackQuery):
    task_id = callback.data.split(":")[1]
    task = tasks.pop(task_id, None)
    if not task:
        await callback.answer("–ó–∞—è–≤–∫–∞ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞.")
        return

    user_id = task["user_id"]
    user_name = task["user_name"]
    direction = task["direction"]
    operator_name = task.get("operator_name", "–æ–ø–µ—Ä–∞—Ç–æ—Ä")

    # –£–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –°–ø–∞—Å–∏–±–æ
    await callback.message.delete()
    await callback.answer("–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")

    # –ö–ª–∏–µ–Ω—Ç—É: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ + –≥–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    await bot.send_message(
        user_id,
        f"–ó–∞—è–≤–∫–∞ –Ω–∞ {direction} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ @{operator_name}",
        reply_markup=main_kb
    )

    # –û–ø–µ—Ä–∞—Ç–æ—Ä–∞–º: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏
    for op_id in OPERATORS:
        try:
            await bot.send_message(
                int(op_id),
                f"-> üëè –°–ø–∞—Å–∏–±–æ –∑–∞ {direction} –æ—Ç @{user_name}"
            )
        except:
            pass

# === –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª ===
async def main():
    print("[LOG] üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–µ–º —Å–æ–±—ã—Ç–∏—è...")
    await dp.start_polling(bot, skip_updates=True)  # –∑–¥–µ—Å—å –ø–µ—Ä–µ–¥–∞—ë–º bot

if __name__ == "__main__":
    asyncio.run(main())
