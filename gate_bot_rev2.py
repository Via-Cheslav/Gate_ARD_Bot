import asyncio
import os
import uuid
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardButton, InlineKeyboardMarkup
)
from dotenv import load_dotenv

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPERATORS = os.getenv("OPERATORS", "").split(",") if os.getenv("OPERATORS") else []
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
tasks = {}

# === –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–ª–∏–µ–Ω—Ç–∞ ===
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ü—Ä–æ—à—É –æ—Ç–∫—Ä—ã—Ç—å –≤—ä–µ–∑–¥ üöó")],
        [KeyboardButton(text="üöó –ü—Ä–æ—à—É –æ—Ç–∫—Ä—ã—Ç—å –≤—ã–µ–∑–¥")]
    ],
    resize_keyboard=True
)

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_kb
    )

# === –ö–æ–º–∞–Ω–¥–∞ /id ===
@dp.message(Command("id"))
async def get_id(message: types.Message):
    await message.answer(f"–í–∞—à Telegram ID: {message.from_user.id}")

# === –ö–æ–º–∞–Ω–¥–∞ /help ===
@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    text = (
        "üìò <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –≤–æ—Ä–æ—Ç–∞–º–∏</b>\n\n"
        "üîπ <b>–ü—Ä–æ—à—É –æ—Ç–∫—Ä—ã—Ç—å –≤—ä–µ–∑–¥ üöó</b> ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º –æ—Ç–∫—Ä—ã—Ç—å –≤–æ—Ä–æ—Ç–∞ –¥–ª—è –≤—ä–µ–∑–¥–∞.\n"
        "üîπ <b>üöó –ü—Ä–æ—à—É –æ—Ç–∫—Ä—ã—Ç—å –≤—ã–µ–∑–¥</b> ‚Äî –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ –≤–æ—Ä–æ—Ç –¥–ª—è –≤—ã–µ–∑–¥–∞.\n\n"
        "üîπ –ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä –ø–æ–ª—É—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –Ω–∞–∂–∏–º–∞–µ—Ç ¬´–°–¥–µ–ª–∞–Ω–æ¬ª.\n"
        "üîπ –ö–æ–≥–¥–∞ –≤–æ—Ä–æ—Ç–∞ –æ—Ç–∫—Ä—ã—Ç—ã, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π ¬´üëç –°–ø–∞—Å–∏–±–æ¬ª.\n"
        "üîπ –ü–æ—Å–ª–µ ¬´–°–ø–∞—Å–∏–±–æ¬ª –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –ø—Ä–∏—Ö–æ–¥–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ üëè.\n\n"
        "üìç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/id ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à Telegram ID\n"
        "/start ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –º–µ–Ω—é\n"
    )
    await message.answer(text, parse_mode="HTML", reply_markup=main_kb)

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞ ===
@dp.message(F.text.in_(["–ü—Ä–æ—à—É –æ—Ç–∫—Ä—ã—Ç—å –≤—ä–µ–∑–¥ üöó", "üöó –ü—Ä–æ—à—É –æ—Ç–∫—Ä—ã—Ç—å –≤—ã–µ–∑–¥"]))
async def handle_request(message: types.Message):
    direction = "–≤—ä–µ–∑–¥" if "–≤—ä–µ–∑–¥" in message.text else "–≤—ã–µ–∑–¥"
    user_id = message.from_user.id
    user_name = message.from_user.username or message.from_user.first_name
    task_id = str(uuid.uuid4())

    # –ö–ª–∏–µ–Ω—Ç—É
    user_msg = await message.answer(
        f"[–ö–õ–ò–ï–ù–¢] –ó–∞—è–≤–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º. –û–∂–∏–¥–∞–π—Ç–µ ‚è≥",
        reply_markup=main_kb
    )

    tasks[task_id] = {
        "user_id": user_id,
        "user_name": user_name,
        "direction": direction,
        "user_msg_id": user_msg.message_id
    }

    # –û–ø–µ—Ä–∞—Ç–æ—Ä–∞–º
    for op_id in OPERATORS:
        try:
            kb = InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="‚úÖ –°–¥–µ–ª–∞–Ω–æ", callback_data=f"done:{task_id}"),
                InlineKeyboardButton(text="‚ùå –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"ignore:{task_id}")
            ]])
            await bot.send_message(
                int(op_id),
                f"[–û–ü–ï–†–ê–¢–û–†] @{user_name} –ø—Ä–æ—Å–∏—Ç –æ—Ç–∫—Ä—ã—Ç—å {direction}",
                reply_markup=kb
            )
        except Exception as e:
            print(f"[–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É {op_id}]: {e}")

# === –î–µ–π—Å—Ç–≤–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ ===
@dp.callback_query(F.data.startswith(("done:", "ignore:")))
async def handle_operator_action(callback: types.CallbackQuery):
    action, task_id = callback.data.split(":")
    task = tasks.get(task_id)
    if not task:
        await callback.answer("–ó–∞—è–≤–∫–∞ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    user_id = task["user_id"]
    user_name = task["user_name"]
    direction = task["direction"]
    operator_name = callback.from_user.username or callback.from_user.first_name
    task["operator_name"] = operator_name

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ —Å "–û–∂–∏–¥–∞–π—Ç–µ"
    user_msg_id = task.get("user_msg_id")
    if user_msg_id:
        try:
            await bot.delete_message(chat_id=user_id, message_id=user_msg_id)
        except:
            pass

    if action == "ignore":
        await callback.message.edit_text(f"[–û–ü–ï–†–ê–¢–û–†] –ó–∞—è–≤–∫–∞ –æ—Ç @{user_name} –Ω–∞ {direction} –±—ã–ª–∞ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∞.")
        tasks.pop(task_id, None)
        return

    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
    await callback.message.edit_text(
        f"[–û–ü–ï–†–ê–¢–û–†] –ó–∞—è–≤–∫–∞ –¥–ª—è @{user_name} –Ω–∞ {direction} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞."
    )

    # –ö–ª–∏–µ–Ω—Ç—É
    thank_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üëç –°–ø–∞—Å–∏–±–æ", callback_data=f"thank:{task_id}")]
    ])
    await bot.send_message(
        user_id,
        f"[–ö–õ–ò–ï–ù–¢] –í–æ—Ä–æ—Ç–∞ {direction} –æ—Ç–∫—Ä—ã—Ç—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º @{operator_name}",
        reply_markup=thank_kb
    )

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–ø–∞—Å–∏–±–æ" ===
@dp.callback_query(F.data.startswith("thank:"))
async def handle_thank(callback: types.CallbackQuery):
    task_id = callback.data.split(":")[1]
    task = tasks.pop(task_id, None)
    if not task:
        await callback.answer("–ó–∞—è–≤–∫–∞ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞.")
        return

    user_id = task["user_id"]
    user_name = task["user_name"]
    direction = task["direction"]
    operator_name = task.get("operator_name", "–æ–ø–µ—Ä–∞—Ç–æ—Ä")

    # –£–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –°–ø–∞—Å–∏–±–æ
    try:
        await callback.message.delete()
    except:
        pass

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–ª–∏–µ–Ω—Ç—É
    await bot.send_message(
        user_id,
        f"[–ö–õ–ò–ï–ù–¢] –ó–∞—è–≤–∫–∞ –Ω–∞ {direction} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ @{operator_name}",
        reply_markup=main_kb  # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –æ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏
    for op_id in OPERATORS:
        try:
            await bot.send_message(
                int(op_id),
                f"[–û–ü–ï–†–ê–¢–û–†] üëè –°–ø–∞—Å–∏–±–æ –∑–∞ {direction} –æ—Ç @{user_name}"
            )
        except:
            pass

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞
    await callback.answer("–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")

async def main():
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–µ–º —Å–æ–±—ã—Ç–∏—è...")
    await dp.start_polling(bot, skip_updates=True)

if __name__ == "__main__":
    asyncio.run(main())
